// Code generated by "stringer -type=ChordType,ChordQuality,NoteModifier -output=enums_string.go"; DO NOT EDIT.

package notes

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ChordTypeMinorTriad-0]
	_ = x[ChordTypeMajorTriad-1]
	_ = x[ChordTypeDiminishedTriad-2]
	_ = x[ChordTypeAugmentedTriad-3]
	_ = x[ChordTypeMinorSeventh-4]
	_ = x[ChordTypeMajorSeventh-5]
	_ = x[ChordTypeDominantSeventh-6]
	_ = x[ChordTypeDiminishedSeventh-7]
	_ = x[ChordTypeHalfDiminishedSeventh-8]
}

const _ChordType_name = "ChordTypeMinorTriadChordTypeMajorTriadChordTypeDiminishedTriadChordTypeAugmentedTriadChordTypeMinorSeventhChordTypeMajorSeventhChordTypeDominantSeventhChordTypeDiminishedSeventhChordTypeHalfDiminishedSeventh"

var _ChordType_index = [...]uint8{0, 19, 38, 62, 85, 106, 127, 151, 177, 207}

func (i ChordType) String() string {
	if i < 0 || i >= ChordType(len(_ChordType_index)-1) {
		return "ChordType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ChordType_name[_ChordType_index[i]:_ChordType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ChordQualityMinor-0]
	_ = x[ChordQualityMajor-1]
	_ = x[ChordQualityDiminished-2]
}

const _ChordQuality_name = "ChordQualityMinorChordQualityMajorChordQualityDiminished"

var _ChordQuality_index = [...]uint8{0, 17, 34, 56}

func (i ChordQuality) String() string {
	if i < 0 || i >= ChordQuality(len(_ChordQuality_index)-1) {
		return "ChordQuality(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ChordQuality_name[_ChordQuality_index[i]:_ChordQuality_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoteModifierNone-0]
	_ = x[NoteModifierSharp-1]
	_ = x[NoteModifierFlat - -1]
}

const _NoteModifier_name = "NoteModifierFlatNoteModifierNoneNoteModifierSharp"

var _NoteModifier_index = [...]uint8{0, 16, 32, 49}

func (i NoteModifier) String() string {
	i -= -1
	if i < 0 || i >= NoteModifier(len(_NoteModifier_index)-1) {
		return "NoteModifier(" + strconv.FormatInt(int64(i+-1), 10) + ")"
	}
	return _NoteModifier_name[_NoteModifier_index[i]:_NoteModifier_index[i+1]]
}
